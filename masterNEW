// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Start of File                                                         ║
// ╚═══════════════════════════════════════════════════════════════════════╝
/********************************************
 *  Project: MREN 203 
 *  Authors: David Colaco, Jared Commanda, Mariana Siqueira 
 *  Description: Centralized File for MREN 203
 *  Board:Arduino Uno WiFi Rev2
 ********************************************/
// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Includes, Global Constants & Variables                                ║
// ╚═══════════════════════════════════════════════════════════════════════╝
//Includes
#include <Arduino.h>
#include <Arduino_LSM6DS3.h>
#include <WiFiNINA.h>


//Robot Constants 
const double RHO = 0.0625;// Wheel radius [m]
const float lengthRobot = 0.2775;

//Variables
double uR = 0;// Motor PWM command variable [0-255]
double uL = 0;// Motor PWM command variable [0-255]

volatile long encoder_ticksL = 0;// Counter to keep track of encoder ticks [integer]
volatile long encoder_ticksR = 0;// Counter to keep track of encoder ticks [integer]

double omega_L = 0.0;// Variable to store estimated angular rate of left wheel [rad/s]
double omega_R = 0.0;// Variable to store estimated angular rate of left wheel [rad/s]

const int T = 1000;// Sampling interval for measurements in milliseconds

long t_now = 0;// Counters for milliseconds during interval
long t_last = 0;// Counters for milliseconds during interval

const int TPR = 3000;// Encoder ticks per (motor) revolution (TPR)
float omega_x, omega_y, omega_z = 0;
float a_f, g_f;
double dOmega = -10;
double dSpeed = 0.05;
bool firstVal;
float fox, foy, foz;
double eint;

char ssid[] = "MREN203";      // Wi-Fi SSID
char pass[] = "MREN203wifi";  // Wi-Fi Password

WiFiServer server(80);  // Create a server on port 80
WiFiClient client = server.available();
int keyIndex = 0;                 // your network key Index number (needed only for WEP)
int status = WL_IDLE_STATUS;      //connection status
int controlVariable = 0; // This variable can be changed over the network
// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Pin Config                                                            ║
// ╚═══════════════════════════════════════════════════════════════════════╝

int EA = 6;// Wheel PWM pin (must be a PWM pin)
int EB = 5;// Wheel PWM pin (must be a PWM pin)
int I1 = 7;// Wheel direction digital pins
int I2 = 4;// Wheel direction digital pins
int I3 = 11;// Wheel direction digital pins
int I4 = 10;// Wheel direction digital pins
// Left wheel encoder digital pins
const byte SIGNAL_A = 2;
const byte SIGNAL_B = 3;
// Right wheel encoder digital pins
const byte SIGNAL_C = 8;
const byte SIGNAL_D = 9;

// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ System Interrupts                                                     ║
// ╚═══════════════════════════════════════════════════════════════════════╝
// This function is called when SIGNAL_A goes HIGH
void decodeEncoderTicksL()
{
    if (digitalRead(SIGNAL_B) == LOW)
    {
        // SIGNAL_A leads SIGNAL_B, so count one way
        encoder_ticksL--;
    }
    else
    {
        // SIGNAL_B leads SIGNAL_A, so count the other way
        encoder_ticksL++;
    }

}
// This function is called when SIGNAL_C goes HIGH
void decodeEncoderTicksR()
{

     if (digitalRead(SIGNAL_D) == LOW)
    {
        // SIGNAL_A leads SIGNAL_B, so count one way
        encoder_ticksR--;
    }
    else
    {
        // SIGNAL_B leads SIGNAL_A, so count the other way
        encoder_ticksR++;
    }
}
// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Setup Functions                                                       ║
// ╚═══════════════════════════════════════════════════════════════════════╝

void setup() {
   // Open the serial port at 9600 bps
    Serial.begin(9600);

    // Set the pin modes for the motor driver
    pinMode(EA, OUTPUT);
    pinMode(EB, OUTPUT);
    pinMode(I1, OUTPUT);
    pinMode(I2, OUTPUT);
    pinMode(I3, OUTPUT);
    pinMode(I4, OUTPUT);

    // Set the pin modes for the encoders
    pinMode(SIGNAL_A, INPUT);
    pinMode(SIGNAL_B, INPUT);
    pinMode(SIGNAL_C, INPUT);
    pinMode(SIGNAL_D, INPUT);

    // Select a direction
    digitalWrite(I1, LOW);
    digitalWrite(I2, HIGH);
    digitalWrite(I3, HIGH);
    digitalWrite(I4, LOW);

    // Every time the pin goes high, this is a pulse
    attachInterrupt(digitalPinToInterrupt(SIGNAL_A), decodeEncoderTicksL, RISING);
    attachInterrupt(digitalPinToInterrupt(SIGNAL_C), decodeEncoderTicksR, RISING);


    // Print a message
    Serial.print("Program initialized.");
    Serial.print("\n");
    //Serial.begin(115200);

  while(!Serial){
    delay(10);
  }
  /*Serial.print("Connecting to WiFi...");
    if (WiFi.status() == WL_NO_MODULE) {
        Serial.println("Wi-Fi module not found!");
        while (true);
    }

    while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
        Serial.print(".");
        delay(1000);
    }
    Serial.println("\nConnected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    server.begin(); // Start the web server
  Serial.println();*/
  enable_WiFi();
  connect_WiFi();

  server.begin();
  printWifiStatus();

  // Check board init
  if (!IMU.begin()){
    // Print err
    Serial.println("IMU init  failed");
    while(1){
      delay(10);
    }
  }

  a_f = IMU.accelerationSampleRate();
  g_f = IMU.gyroscopeSampleRate();

  // Print sample rate
  //Serial.println("Accel Sample Rate: ");
  //Serial.print(a_f);
  //Serial.println("Gyro Sample Rate: ");
  //Serial.print(g_f);
}

// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Additional Functions                                                  ║
// ╚═══════════════════════════════════════════════════════════════════════╝
void drive(int x, int y){
  if(x<0){
    digitalWrite(I1, HIGH);
    digitalWrite(I2, LOW);
  }else{
      // Select a direction
    digitalWrite(I1, LOW);
    digitalWrite(I2, HIGH);
  }
  if(y<0){
    digitalWrite(I3, LOW);
    digitalWrite(I4, HIGH);
  }else{
    digitalWrite(I3, HIGH);
    digitalWrite(I4, LOW);
  }

  analogWrite(EA, abs(x));
  analogWrite(EB, abs(y)); 

}
void wifi(){
  WiFiClient client = server.available();  // Listen for incoming clients

    if (client) {
        Serial.println("New Client Connected");
        String request = client.readStringUntil('\r');  // Read the request
        Serial.println(request);
        
        // Parse the request to find "?var=XX"
        if (request.indexOf("GET /?var=") != -1) {
            int varIndex = request.indexOf("GET /?var=") + 10;  // Position of variable value
            int endIndex = request.indexOf(" ", varIndex);  // End of the value
            String valueString = request.substring(varIndex, endIndex);  // Extract value
            controlVariable = valueString.toInt();  // Convert to integer
            Serial.print("Updated Variable: ");
            Serial.println(controlVariable);
        }

        // Respond to client
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println();
        client.println("<h1>Arduino Control</h1>");
        client.print("<p>Variable: ");
        client.print(controlVariable);
        client.println("</p>");
        delay(100);
        client.stop();
        delay(100);
    }
}
double vehicleSpeed(double v_L, double v_R){
  double v;
  v = 0.5 * (v_L + v_R);
  return v;
}

double ENowR(double vRDesired, double vR){
  return vRDesired - vR;
}
double ENowL(double vLDesired, double vL){
  return vLDesired - vL;
}
double GetVLDesired(double vDesired, double ODesired){
  return vDesired - ODesired * 0.5 * lengthRobot;
}
double GetVRDesired(double vDesired, double ODesired){
  return vDesired + ODesired * 0.5 * lengthRobot;
}

double turningRate(float vr, float vl){
  double turningRate = (1/0.2775) * (vr - vl);
  return turningRate;
}
short PIControllerR(double e_now, double k_P, double e_int, double k_I){
  short u;
  u = (short)(k_P * e_now + k_I * e_int);
  if(u > 255){
    u = 255;
  } else if (u < -255){
    u = -255;
  }
  //Serial.println("Calling it");
  return u;
}
short PIControllerL(double e_now, double k_P, double e_int, double k_I){
  short u;
  u = (short)(k_P * e_now + k_I * e_int);
  if(u > 255){
    u = 255;
  } else if (u < -255){
    u = -255;
  }
  //Serial.println("Calling it");
  return u;
}
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");

  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}

void enable_WiFi() {
  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < "1.0.0") {
    Serial.println("Please upgrade the firmware");
  }
}

void connect_WiFi() {
  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
}

void printWEB() {

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {

            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
           
            //create the buttons
            client.print("<button onclick=\"sendCommand('/W')\">Forward</button><br>");
client.print("<button onclick=\"sendCommand('/S')\">Backward</button><br><br>");
client.print("<button onclick=\"sendCommand('/D')\">Right</button><br>");
client.print("<button onclick=\"sendCommand('/A')\">Left</button><br><br>");
client.print("<button onclick=\"sendCommand('/Q')\">Stop</button><br><br>");
client.print("<button onclick=\"sendCommand('/E')\">E</button><br><br>");
client.print("<button onclick=\"sendCommand('/R')\">R</button><br><br>");
client.print("<script>");
client.print("function sendCommand(cmd) {");
client.print("  var xhr = new XMLHttpRequest();");
client.print("  xhr.open('GET', cmd, true);");
client.print("  xhr.send();");
client.print("}");
client.print("document.addEventListener('keydown', function(event) {");
client.print("  var keyMap = { 'W': '/W', 'S': '/S', 'D': '/D', 'A': '/A', 'Q': '/Q' ,'E': '/E','R': '/R'};");
client.print("  var key = event.key.toUpperCase();");
client.print("  if (keyMap[key]) { sendCommand(keyMap[key]); }");
client.print("});");
client.print("</script>");
            int randomReading = analogRead(A1);
            client.print("Random reading from analog pin: ");
            client.print(randomReading);
           
            
            

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          }
          else {      // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        }
        else if (c != '\r') {    // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        if (currentLine.endsWith("GET /W")) {
        drive(-200, -200);  
        }
        if (currentLine.endsWith("GET /S")) {
        drive(200, 200);    
        }if (currentLine.endsWith("GET /D")) {
        drive(-230, 230);      
        }if (currentLine.endsWith("GET /A")) {
        drive(230, -230);    
        }
        if (currentLine.endsWith("GET /Q")) {
        drive(0, 0);    
        }
        if (currentLine.endsWith("GET /E")) {
        //E action     
        drive(-255, -255); 
        }
        if (currentLine.endsWith("GET /R")) {
        //R action 
        drive(0, 0);    
        }

      }
    }
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}
// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Main Loop                                                             ║
// ╚═══════════════════════════════════════════════════════════════════════╝

void loop()
{
    client = server.available();

  if (client) {
    printWEB();
  }
    t_now = millis();

    if (t_now - t_last >= T)
    {
        // Estimate the rotational speed [rad/s]
        omega_L = 2.0 * PI * ((double)encoder_ticksL / (double)TPR) * 1000.0 / (double)(t_now - t_last);
        omega_R = 2.0 * PI * ((double)encoder_ticksR / (double)TPR) * 1000.0 / (double)(t_now - t_last);

        // Print some stuff to the serial monitor
      
        /*Serial.print("Estimated left wheel speed: ");
        Serial.print(omega_L);
        Serial.print(" rad/s");
        Serial.print("    Estimated right wheel speed: ");
        Serial.print(-omega_R);
        Serial.print(" rad/s");
        Serial.print("\n");
        
        Serial.print("Translation left wheel speed: ");
        Serial.print(omega_L*RHO);
        Serial.print(" m/s");
        Serial.print("    Translation right wheel speed: ");
        Serial.print(-omega_R*RHO);
        Serial.print(" m/s");
        Serial.print("\n");*/
        // Record the current time [ms]
        t_last = t_now;

        // Reset the encoder ticks counter
        encoder_ticksL = 0;
        encoder_ticksR = 0;
        if (IMU.gyroscopeAvailable()){
          if(firstVal){
                IMU.readGyroscope(fox, foy, foz);
                firstVal = false;
          }

          IMU.readGyroscope(omega_x, omega_y, omega_z);
          omega_x = omega_x - fox;
          omega_y = omega_y - foy;
          omega_z = omega_z - foz;


          
          /*Serial.println("Gyroscope Measurements: ");
          Serial.print(omega_x);
          Serial.print("\t");
          Serial.print(omega_y);
          Serial.print("\t");
          Serial.print(omega_z);
          Serial.print(" deg/s\n");
          Serial.print("turingingRate:  ");
          Serial.println(turningRate(-omega_R*RHO, omega_L*RHO));*/
      
    }

    // Set the wheel motor PWM command [0-255]
    double enowR = ENowR(GetVRDesired(dSpeed, dOmega), omega_R);
    double enowL = ENowL(GetVLDesired(dSpeed, dOmega), omega_L);

    double eintR = eintR + enowR;
    double eintL = eintL + enowL;
    // Set the wheel motor PWM command [0-255]
    uR = PIControllerR(enowR, 200, eintR, 100); // Using R for now but they are diff (L and R)
    uL = PIControllerL(enowL, 200, eintL, 100);

    

    // PWM command to the motor driver
    //Serial.print(controlVariable);
    //analogWrite(EA, controlVariable);
    //analogWrite(EB, controlVariable);
    
  
   
    
}
}



// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ Unused/Trash                                                          ║
// ╚═══════════════════════════════════════════════════════════════════════╝

// ╔═══════════════════════════════════════════════════════════════════════╗
// ║ End of File                                                           ║
// ╚═══════════════════════════════════════════════════════════════════════╝
